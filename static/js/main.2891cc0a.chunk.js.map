{"version":3,"sources":["js/components/AppBar.js","js/apps/CoreApp/index.js","serviceWorker.js","index.js"],"names":["AppBar","_this$props","this","props","onToggleMenu","title","react_default","a","createElement","className","type","onClick","Menu_default","React","PureComponent","App","state","isMenuOpen","toggleMenu","_this","setState","prevState","Fragment","AppBar_AppBar","Component","Boolean","window","location","hostname","match","render","CoreApp_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mPAKqBA,mLAOV,IAAAC,EACyBC,KAAKC,MAA7BC,EADDH,EACCG,aAAcC,EADfJ,EACeI,MAEtB,OACEC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAChBH,EAAAC,EAAAC,cAAA,UAAQE,KAAK,SAASC,QAASP,GAC7BE,EAAAC,EAAAC,cAACI,EAAAL,EAAD,MACAD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAf,SAEFH,EAAAC,EAAAC,cAAA,UAAKH,WAhBuBQ,IAAMC,eCDrBC,6MAEnBC,MAAQ,CACNC,YAAY,KAGdC,WAAa,WACXC,EAAKC,SAAS,SAAAC,GAAS,MAAK,CAC1BJ,YAAaI,EAAUJ,uFAKzB,OACEX,EAAAC,EAAAC,cAAAF,EAAAC,EAAAe,SAAA,KACEhB,EAAAC,EAAAC,cAACe,EAAD,CAAQlB,MAAM,QAAQD,aAAcF,KAAKgB,aACzCZ,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,wBAAgBN,KAAKc,MAAMC,WAAa,OAAS,iBAjBxBJ,IAAMW,WCQnBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,iBAAOxB,EAAAC,EAAAC,cAACuB,EAAD,MAASC,SAASC,eAAe,SDwHlC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.2891cc0a.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport MenuIcon from '@material-ui/icons/Menu'\n\nexport default class AppBar extends React.PureComponent {\n\n  static propTypes = {\n    onToggleMenu: PropTypes.func,\n    title: PropTypes.string.isRequired,\n  }\n\n  render() {\n    const { onToggleMenu, title } = this.props\n\n    return (\n      <header className='appbar'>\n        <button type='button' onClick={onToggleMenu}>\n          <MenuIcon/>\n          <div className='visually-hidden'>Menu</div>\n        </button>\n        <h1>{title}</h1>\n      </header>\n    )\n  }\n\n}\n","import React from 'react'\n\nimport AppBar from '../../components/AppBar'\n\nexport default class App extends React.Component {\n\n  state = {\n    isMenuOpen: false,\n  }\n\n  toggleMenu = () => {\n    this.setState(prevState => ({\n      isMenuOpen: !prevState.isMenuOpen,\n    }))\n  }\n\n  render() {\n    return (\n      <>\n        <AppBar title='Hello' onToggleMenu={this.toggleMenu}/>\n        <p>This is my app</p>\n        <p>isMenuOpen: {this.state.isMenuOpen ? 'true' : 'false'}</p>\n      </>\n    )\n  }\n\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import './scss/index.scss'\n\n// React\nimport React from 'react'\nimport { render } from 'react-dom'\n\nimport App from './js/apps/CoreApp/index.js'\nimport * as serviceWorker from './serviceWorker'\n\nrender(<App />, document.getElementById('root'))\n\nserviceWorker.unregister()\n"],"sourceRoot":""}